
type Trip {
  id: ID!
  username: String
  appId: String
  deviceAddress: String
  deviceName: String
  startTimestamp: String
  maxKmsHour: String
  numberOfUnlocks: String
  sumKms: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTripConnection {
  items: [Trip]!
  nextToken: String
}

input ModelTripFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  appId: ModelStringInput
  deviceAddress: ModelStringInput
  deviceName: ModelStringInput
  startTimestamp: ModelStringInput
  maxKmsHour: ModelStringInput
  numberOfUnlocks: ModelStringInput
  sumKms: ModelStringInput
  and: [ModelTripFilterInput]
  or: [ModelTripFilterInput]
  not: ModelTripFilterInput
}

type Query {
  getTrip(id: ID!): Trip
  listTrips(filter: ModelTripFilterInput, limit: Int, nextToken: String): ModelTripConnection
}

input ModelTripConditionInput {
  username: ModelStringInput
  appId: ModelStringInput
  deviceAddress: ModelStringInput
  deviceName: ModelStringInput
  startTimestamp: ModelStringInput
  maxKmsHour: ModelStringInput
  numberOfUnlocks: ModelStringInput
  sumKms: ModelStringInput
  and: [ModelTripConditionInput]
  or: [ModelTripConditionInput]
  not: ModelTripConditionInput
}

input CreateTripInput {
  id: ID
  username: String
  appId: String
  deviceAddress: String
  deviceName: String
  startTimestamp: String
  maxKmsHour: String
  numberOfUnlocks: String
  sumKms: String
}

input UpdateTripInput {
  id: ID!
  username: String
  appId: String
  deviceAddress: String
  deviceName: String
  startTimestamp: String
  maxKmsHour: String
  numberOfUnlocks: String
  sumKms: String
}

input DeleteTripInput {
  id: ID!
}

type Mutation {
  createTrip(input: CreateTripInput!, condition: ModelTripConditionInput): Trip
  updateTrip(input: UpdateTripInput!, condition: ModelTripConditionInput): Trip
  deleteTrip(input: DeleteTripInput!, condition: ModelTripConditionInput): Trip
}

input ModelSubscriptionTripFilterInput {
  id: ModelSubscriptionIDInput
  username: ModelSubscriptionStringInput
  appId: ModelSubscriptionStringInput
  deviceAddress: ModelSubscriptionStringInput
  deviceName: ModelSubscriptionStringInput
  startTimestamp: ModelSubscriptionStringInput
  maxKmsHour: ModelSubscriptionStringInput
  numberOfUnlocks: ModelSubscriptionStringInput
  sumKms: ModelSubscriptionStringInput
  and: [ModelSubscriptionTripFilterInput]
  or: [ModelSubscriptionTripFilterInput]
}

type Subscription {
  onCreateTrip(filter: ModelSubscriptionTripFilterInput): Trip @aws_subscribe(mutations: ["createTrip"])
  onUpdateTrip(filter: ModelSubscriptionTripFilterInput): Trip @aws_subscribe(mutations: ["updateTrip"])
  onDeleteTrip(filter: ModelSubscriptionTripFilterInput): Trip @aws_subscribe(mutations: ["deleteTrip"])
}

